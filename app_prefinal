from langchain_google_genai import ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from langchain.prompts import PromptTemplate
from langchain_community.document_loaders import PyPDFLoader
from langchain_text_splitters import CharacterTextSplitter
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain
from langchain_community.vectorstores import Chroma
import os
import streamlit as st
from PIL import Image
import google.generativeai as genai

genai.configure(api_key="AIzaSyBC8QHmbUHNWDhu4dC7v5bppEySFemctTM")

# Initialize model and embeddings
llm = ChatGoogleGenerativeAI(model="gemini-pro")
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

# Load and split PDF into multiple pages
loader = PyPDFLoader("item_list.pdf")
pages = loader.load_and_split()

# Initialize VectorDB and Retriever
vectordb = Chroma.from_documents(pages, embeddings)
retriever = vectordb.as_retriever(search_kwargs={"k": 2})

# Define retrieval chain
template = """
You are a helpful AI assistant.
Your work is to give the link of input.
In the PDF format is 
input1**input1_link**
input2**input2_link**
and so on
input: {input}
Context: {context}
Please provide only the link associated with the input:
answer:
"""
prompt = PromptTemplate.from_template(template)
combine_docs_chain = create_stuff_documents_chain(llm, prompt)
retrieval_chain = create_retrieval_chain(retriever, combine_docs_chain)

def get_link_from_db(item_name):
    try:
        response = retrieval_chain.invoke({"input": item_name})
        link = response.get("answer", "#")
        return link
    except Exception as e:
        return f"An error occurred: {e}"

# Initialize Streamlit app
st.set_page_config(page_title="Makery")
st.markdown("<h1 style='text-align: center; color: white;'>Makery</h1>", unsafe_allow_html=True)

input_text = st.text_input("What do you want to make?", key="input")
uploaded_file = st.file_uploader("Show us an image", type=["jpg", "jpeg", "png"])

image = None
if uploaded_file:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image.", use_column_width=True)


input_prompt = """
You are a creator who wants to create an item shown in the image or mentioned in the text. List down all the required items you will need to create that item.
List all those items in the following format:
    1. Item 1
    2. Item 2
    3. Item 3
    and so on.
Make sure to only give items, no extra text, and don't group similar items.
Do not separate items and tools, list them without any extra heading.
Never give extra information or comments, just show item names only. It is very important to just show only item names.
Avoid using random sentences like "your favorite" or "as per your choice".
Give only top priority requirements.
"""

# Initialize the Google Generative AI model
def get_gemini_response(input_text, image, prompt):
    model = genai.GenerativeModel('gemini-1.5-pro-001')
    try:
        if input_text and image:
            response = model.generate_content([input_text, image, prompt])
        elif input_text:
            response = model.generate_content([input_text, prompt])
        elif image:
            response = model.generate_content([image, prompt])
        else:
            response = model.generate_content([prompt])
        return response.text
    except Exception as e:
        return f"An error occurred: {e}"

# Creating answer buttons
col1, col2, col3 = st.columns(3)
with col1:
    ask_requirements = st.button("Ask for requirements")
with col2:
    get_steps = st.button("Steps to create")
with col3:
    related_videos = st.button("Related videos")

if st.button("Go to Cart Status"):
    st.markdown("[Click here to view the Cart Status](http://localhost:8504)", unsafe_allow_html=True)

# Add process of creating product generating function
input_prompt_steps = """
You are a creator who wants to create an item shown in the image or mentioned in the text. You have all the items listed. Please provide a detailed step-by-step guide to create the item using these items.
Make sure to include all the necessary steps without skipping any important details.
Format:
Step 1: Do this
Step 2: Do that
and so on.
"""
if get_steps:
    response_steps = get_gemini_response(input_text, image, input_prompt_steps)
    st.subheader("Steps to Create the Product:")
    st.write(response_steps)

# Display requirements and options for items
if ask_requirements:
    response = get_gemini_response(input_text, image, input_prompt)
    st.subheader("Requirements:")

    # Assume response is a list of items in text format
    items_list = response.strip().split('\n')
    for item in items_list:
        item_name = item.strip().split('.', 1)[-1].strip()  # Extract the item name
        if item_name:
            # Retrieve the associated link from the database
            link = get_link_from_db(item_name)
            
            # URL for searching the item on your Django site
            search_url = f"http://localhost:8000/search/?q={item_name.replace(' ', '+')}"

            # Display the item with "Go" and "Buy" buttons
            col1, col2, col3 = st.columns([3, 1, 1])
            with col1:
                st.write(item_name)
            with col2:
                # Use markdown to create a clickable "Go" button
                st.markdown(
                    f'<a href="{search_url}" target="_blank" class="action-button">Top Choices</a>',
                    unsafe_allow_html=True
                )
            with col3:
                # Use markdown to create a clickable "Buy" button
                st.markdown(
                    f'<a href="{link}" target="_blank" class="action-button">More Options</a>',
                    unsafe_allow_html=True
                )

# Add some CSS to style the buttons
st.markdown("""
    <style>
        .action-button {
            display: inline-block;
            padding: 8px 16px;
            font-size: 16px;
            font-weight: bold;
            color: #fff;
            background-color: #D0D0D0;
            border-radius: 4px;
            text-decoration: none;
        }
        .action-button:hover {
            background-color: #A9A9A9;
        }
    </style>
""", unsafe_allow_html=True)
